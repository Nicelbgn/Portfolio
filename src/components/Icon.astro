---
// Import des types nécessaires depuis Astro
import type { HTMLAttributes } from 'astro/types';
// Import des chemins des icônes
import { iconPaths } from './IconPaths';

// Interface pour définir les propriétés attendues
interface Props {
  icon: keyof typeof iconPaths; // Le nom de l'icône à afficher
  color?: string; // La couleur de l'icône (par défaut : currentcolor)
  gradient?: boolean; // Indique si l'icône doit utiliser un dégradé
  size?: string; // La taille de l'icône
}

// Extraction des propriétés de Astro.props
const { color = 'currentcolor', gradient, icon, size } = Astro.props;
// Récupération du chemin de l'icône spécifiée
const iconPath = iconPaths[icon];

// Création d'un objet d'attributs pour le SVG en fonction de la taille
const attrs: HTMLAttributes<'svg'> = {};
if (size) attrs.style = { '--size': size };

// Génération d'un identifiant unique pour le dégradé
const gradientId = 'icon-gradient-' + Math.round(Math.random() * 10e12).toString(36);
---

<svg
	xmlns="http://www.w3.org/2000/svg"
	width="40"
	height="40"
	viewBox="0 0 256 256"
	aria-hidden="true"
	stroke={gradient ? `url(#${gradientId})` : color}
	fill={gradient ? `url(#${gradientId})` : color}
	{...attrs}
>
	<g set:html={iconPath} /> {/* Affiche le chemin de l'icône */}
	{
		gradient && (
			<linearGradient
				id={gradientId}
				x1="23"
				x2="235"
				y1="43"
				y2="202"
				gradientUnits="userSpaceOnUse"
			>
				<stop stop-color="var(--gradient-stop-1)" />
				<stop offset=".5" stop-color="var(--gradient-stop-2)" />
				<stop offset="1" stop-color="var(--gradient-stop-3)" />
			</linearGradient>
		)
	}
</svg>

<style>
	svg {
		vertical-align: middle;
		width: var(--size, 1em);
		height: var(--size, 1em);
	}
</style>